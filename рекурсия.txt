//1
#include <stdio.h>

#include <iostream>
using namespace std;\
  int gcd(int a, int b) {
        if (b == 0)
            return a;
        else
            return gcd(b, a % b);
    }
int main() {

    setlocale(LC_ALL, "rus");
    int a, b;
    cout << "введите число ";
    cin >> a;
    cout << "введите 2 число";
    cin >> b;
    cout << "результат "<<gcd(a, b);
}

//2

#include <iostream>
#include <time.h>
using namespace std;

struct game
{
    int q[4];
    int a[4];
    int num;

    void init()
    {
        for (int i = 0; i < 4; ++i)
        {
            q[i] = rand() % 10;
        }
    }

    void proceed(int n)
    {
        ++n;

        cout << "\nвведите номер: ";
        cin >> num;

        if (check(num))
        {
            cout << "\n******\n\nOK, attempts = " << n;

            char x;
            do
            {
                cout << "\n\nAnother run? (y/n) ";
                cin >> x;
            } while (x != 'y' && x != 'n');

            if (x == 'y') run();


        }
        else {
            proceed(n);
        }
    }

    bool check(int num)
    {
        int temp[4];
        memcpy(temp, q, 4 * sizeof(int));

        for (int i = 3; i >= 0; --i)
        {
            a[i] = num % 10;
            num /= 10;
        }

        int b = 0;
        int c = 0;

        for (int i = 0; i < 4; ++i)
        {
            if (a[i] == temp[i]) ++c;
        }

        for (int i = 0; i < 4; ++i)
        {
            for (int j = 0; j < 4; ++j)
            {
                if (a[i] == temp[j])
                {
                    ++b;
                    temp[j] = -1;
                    break;
                }
            }
        }

        cout << "\n Cows = " << c << " B = " << b << "\n------------------------";

        if (b == 4) return true;

        return false;
    }

    void run()
    {
        init();
        proceed(0);
    }
};

int main()
{
        setlocale(LC_ALL, "rus");
    srand(time(0));

    game A;

    A.run();

    system("pause");
    return 0;
}




\\3
#include <iostream>

using namespace std;

const int SIZE = 6;

void show_arr(const int[SIZE][SIZE]);
int max_horse_moves(int arr[SIZE][SIZE], int x, int y, int horse_path);

int main()
{
    int arr[SIZE][SIZE]{};
    int x, y;
    cout << "Enter coordinates x & y using space: ";
    cin >> x >> y;
    max_horse_moves(arr, x, y, 0);
    cout << "----------------------------------\n";
    show_arr(arr);
    return 0;
}
int max_horse_moves(int arr[SIZE][SIZE], int i, int j, int horse_path)
{
    arr[i][j] = ++horse_path;
    if (arr[i + 2][j + 1] < arr[SIZE][SIZE] && arr[i + 2][j + 1] == 0) return max_horse_moves(arr, (i + 2), (j + 1), horse_path);
    if (arr[i + 1][j + 2] < arr[SIZE][SIZE] && arr[i + 1][j + 2] == 0) return max_horse_moves(arr, (i + 1), (j + 2), horse_path);
    if (arr[i - 1][j - 2] >= arr[0][0] && arr[i - 1][j - 2] == 0) return max_horse_moves(arr, (i - 1), (j - 2), horse_path);
    if (arr[i - 2][j - 1] >= arr[0][0] && arr[i - 2][j - 1] == 0) return max_horse_moves(arr, (i - 2), (j - 1), horse_path);
    if (arr[i + 1][j - 2] >= arr[0][0] && arr[i + 1][j - 2] < arr[SIZE][SIZE] && arr[i + 1][j - 2] == 0) return max_horse_moves(arr, (i + 1), (j - 2), horse_path);
    if (arr[i - 1][j + 2] >= arr[0][0] && arr[i - 1][j + 2] < arr[SIZE][SIZE] && arr[i - 1][j + 2] == 0) return max_horse_moves(arr, (i - 1), (j + 2), horse_path);
    if (arr[i - 2][j + 1] >= arr[0][0] && arr[i - 2][j + 1] < arr[SIZE][SIZE] && arr[i - 2][j + 1] == 0) return max_horse_moves(arr, (i - 2), (j + 1), horse_path);
    if (arr[i + 2][j - 1] >= arr[0][0] && arr[i + 2][j - 1] < arr[SIZE][SIZE] && arr[i + 2][j - 1] == 0) return max_horse_moves(arr, (i + 2), (j - 1), horse_path);
    return 0;
}

void show_arr(const int arr[SIZE][SIZE])
{
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
            cout << arr[i][j] << "\t ";
        cout << "\n";
    }
}


//4
#include <iostream>
#include<stdarg.h>
using namespace std;
int power(int a, int b)
{
    if (b == 0)
        return (a);
    if (b != 0)
  b--;
        return (a * power(a, b ));
}
int main() {
    setlocale(LC_ALL, "rus");
    int a =0;
    cout << "введите число \n";
    cin >> a;
    int b = 0;
    cout << "введите степень \n";
    cin >> b;
    
    power(a, b);
       cout <<"результат = "<< power(a, b)<<"\n";
       return 0;
}




//5
#include <iostream>
#include<stdarg.h>
using namespace std;

void zvezdy(int n)
{
    if (n==0)
    {
        return;
    }
    cout <<'*'<<" ";
    n--;
    zvezdy(n );
}
void main()
{
    setlocale(LC_ALL, "rus");
    int n;
    cout << "количество звезд ";
    cin >> n;
    zvezdy(n);
}




//6
#include <iostream>
#include<stdarg.h>
using namespace std;
int power(int a, int b)
{if (a == b) {
        return 0;
    }
  
    if (a < b) {
       
        a++;
        return (a+ power(a, b));
    }
    
}
int main() {
    setlocale(LC_ALL, "rus");
    int a =0;
    cout << "введите начальное значение \n";
    cin >> a;
    int b = 0;
    cout << "введите конечное значение \n";
    cin >> b;
    
    power(a, b);
      cout <<"результат = "<< power(a, b)<<"\n";
       return 0;
}

//7

#include <iostream>
# include <time.h>
# include <iomanip>
# include <limits.h>

using namespace std;

int searchMin(int* massiv, int massivSize, int startIndex, int& min);
int initAndPrintMassiv(int* massiv, int massivSize);


int main()
{
    srand((int)time(NULL));
    const int massivSize = 100;
    int massiv[massivSize];
    int min = INT_MAX;
    initAndPrintMassiv(massiv, massivSize);
    searchMin(massiv, massivSize, 0, min);
    cout<< "Min = " << min << endl;
    return   0;
}

int searchMin(int* massiv, int massivSize, int startIndex, int& min)
{
    int localMin = 0;
   
    if(startIndex + 9 == massivSize)
    {
        return 0;
    }
    
  for (int i = startIndex; i < startIndex + 10; i++)
    {
        localMin += massiv[i];
    }
    if( localMin < min)
    {
        min = localMin;
    }
    
     cout << "Start = " << startIndex << " minSum = " << min << endl;
    return searchMin(massiv, massivSize, startIndex + 1, min);
}


 int initAndPrintMassiv(int* massiv, int massivSize)
{
   for( int i = 0; i < massivSize; i++)
    {
        *(massiv + i) = rand() % 101;
       cout  << setw(4) << *(massiv + i) << " ";
        if( i % 10 == 9)
        {
             cout <<endl;
        }
    }
   return 0;//initAndPrintMassiv( massiv,  massivSize);
}